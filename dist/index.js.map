{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar tanf = require( '@stdlib/math-base-special-tanf' );\nvar f32 = require( '@stdlib/number-float64-base-to-float32' );\n\n\n// VARIABLES //\n\nvar ONE = f32( 1.0 );\n\n\n// MAIN //\n\n/**\n* Evaluates the cotangent of a single-precision floating-point number (in radians).\n*\n* @param {number} x - input value (in radians)\n* @returns {number} cotangent\n*\n* @example\n* var v = cotf( 0.0 );\n* // returns Infinity\n*\n* @example\n* var v = cotf( 3.141592653589793/2.0 );\n* // returns ~0.0\n*\n* @example\n* var v = cotf( -3.141592653589793/4.0 );\n* // returns ~-1.0\n*\n* @example\n* var v = cotf( 3.141592653589793/4.0 );\n* // returns ~1.0\n*\n* @example\n* var v = cotf( NaN );\n* // returns NaN\n*/\nfunction cotf( x ) {\n\treturn f32( ONE / tanf( f32( x ) ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = cotf;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the cotangent of a single-precision floating-point number (in radians).\n*\n* @module @stdlib/math-base-special-cotf\n*\n* @example\n* var cotf = require( '@stdlib/math-base-special-cotf' );\n*\n* var v = cotf( 0.0 );\n* // returns Infinity\n*\n* v = cotf( 3.141592653589793/2.0 );\n* // returns ~0.0\n*\n* v = cotf( -3.141592653589793/4.0 );\n* // returns ~-1.0\n*\n* v = cotf( 3.141592653589793/4.0 );\n* // returns ~1.0\n*\n* v = cotf( NaN );\n* // returns NaN\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAO,QAAS,gCAAiC,EACjDC,EAAM,QAAS,wCAAyC,EAKxDC,EAAMD,EAAK,CAAI,EA+BnB,SAASE,EAAMC,EAAI,CAClB,OAAOH,EAAKC,EAAMF,EAAMC,EAAKG,CAAE,CAAE,CAAE,CACpC,CAKAL,EAAO,QAAUI,ICpBjB,IAAIE,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "tanf", "f32", "ONE", "cotf", "x", "main"]
}
